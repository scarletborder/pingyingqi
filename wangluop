package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
)

const API_KEY = "qrtt7xCfGXHVPP0ekGjnPvUR"
const SECRET_KEY = "tDckybGdzRc7WVvLyObWbGed0FrUbvdH"

func main() {

	url := "https://aip.baidubce.com/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/completions?access_token=" + GetAccessToken()
	payload := strings.NewReader(`{"messages":[{"role":"user","content":"Please help me output the result of the code below.\r\nYour output format and tips are here.\r\n- If the code run successfully, output the result in \"Data\" and the \"Code\" is 0.\r\n- It may exists some bug and you need to point it. If it exists bug, output the\r\nbug in \"Data\" and the \"Code\" is 1.\r\n- If the program runs into an infinite loop, the \"Code\" is 3, output partial result in \"Data\".\r\n\r\n` + "`" + `` + "`" + `` + "`" + `json\r\n{\"Code\":0,\"Data\":\"The result\"}\r\n` + "`" + `` + "`" + `` + "`" + `\r\nYou should not output other content except for the json text.\r\nAnd the code is here\r\n` + "`" + `` + "`" + `` + "`" + `golang\r\npackage main;\r\nimport \"fmt\"\r\nfunc main(){\r\n        for true{\r\n                fmt.Println(\"hello\")\r\n        }\r\n}\r\n` + "`" + `` + "`" + `` + "`" + `golang\npackage main;\nimport \"fmt\"\nfunc main(){\n\tfor true{\n\t\tfmt.Println(\"hello\")\n\t}\n}\n` + "`" + `` + "`" + `` + "`" + `"},{"role":"assistant","content":"` + "`" + `` + "`" + `` + "`" + `json\n{\"Code\":3,\"Data\":\"hello\"}\n` + "`" + `` + "`" + `` + "`" + `"}],"top_p":0.5}`)
	client := &http.Client{}
	req, err := http.NewRequest("POST", url, payload)

	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Add("Content-Type", "application/json")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(string(body))
}

/**
 * 使用 AK，SK 生成鉴权签名（Access Token）
 * @return string 鉴权签名信息（Access Token）
 */
func GetAccessToken() string {
	url := "https://aip.baidubce.com/oauth/2.0/token"
	postData := fmt.Sprintf("grant_type=client_credentials&client_id=%s&client_secret=%s", API_KEY, SECRET_KEY)
	resp, err := http.Post(url, "application/x-www-form-urlencoded", strings.NewReader(postData))
	if err != nil {
		fmt.Println(err)
		return ""
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return ""
	}
	accessTokenObj := map[string]string{}
	json.Unmarshal([]byte(body), &accessTokenObj)
	return accessTokenObj["access_token"]
}
