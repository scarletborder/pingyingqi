// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: idl/CodePro.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CodeProProgramer_CodePro_FullMethodName = "/CodeProProgramer/CodePro"
	CodeProProgramer_Dislike_FullMethodName = "/CodeProProgramer/Dislike"
)

// CodeProProgramerClient is the client API for CodeProProgramer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeProProgramerClient interface {
	// [Main], CodePro service
	CodePro(ctx context.Context, in *CodeProRequest, opts ...grpc.CallOption) (*CodeProResp, error)
	// 全局禁用某个完全匹配字段的包
	Dislike(ctx context.Context, in *DislikedPackage, opts ...grpc.CallOption) (*DislikedResp, error)
}

type codeProProgramerClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeProProgramerClient(cc grpc.ClientConnInterface) CodeProProgramerClient {
	return &codeProProgramerClient{cc}
}

func (c *codeProProgramerClient) CodePro(ctx context.Context, in *CodeProRequest, opts ...grpc.CallOption) (*CodeProResp, error) {
	out := new(CodeProResp)
	err := c.cc.Invoke(ctx, CodeProProgramer_CodePro_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeProProgramerClient) Dislike(ctx context.Context, in *DislikedPackage, opts ...grpc.CallOption) (*DislikedResp, error) {
	out := new(DislikedResp)
	err := c.cc.Invoke(ctx, CodeProProgramer_Dislike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeProProgramerServer is the server API for CodeProProgramer service.
// All implementations must embed UnimplementedCodeProProgramerServer
// for forward compatibility
type CodeProProgramerServer interface {
	// [Main], CodePro service
	CodePro(context.Context, *CodeProRequest) (*CodeProResp, error)
	// 全局禁用某个完全匹配字段的包
	Dislike(context.Context, *DislikedPackage) (*DislikedResp, error)
	mustEmbedUnimplementedCodeProProgramerServer()
}

// UnimplementedCodeProProgramerServer must be embedded to have forward compatible implementations.
type UnimplementedCodeProProgramerServer struct {
}

func (UnimplementedCodeProProgramerServer) CodePro(context.Context, *CodeProRequest) (*CodeProResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CodePro not implemented")
}
func (UnimplementedCodeProProgramerServer) Dislike(context.Context, *DislikedPackage) (*DislikedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dislike not implemented")
}
func (UnimplementedCodeProProgramerServer) mustEmbedUnimplementedCodeProProgramerServer() {}

// UnsafeCodeProProgramerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeProProgramerServer will
// result in compilation errors.
type UnsafeCodeProProgramerServer interface {
	mustEmbedUnimplementedCodeProProgramerServer()
}

func RegisterCodeProProgramerServer(s grpc.ServiceRegistrar, srv CodeProProgramerServer) {
	s.RegisterService(&CodeProProgramer_ServiceDesc, srv)
}

func _CodeProProgramer_CodePro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeProProgramerServer).CodePro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeProProgramer_CodePro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeProProgramerServer).CodePro(ctx, req.(*CodeProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeProProgramer_Dislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikedPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeProProgramerServer).Dislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeProProgramer_Dislike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeProProgramerServer).Dislike(ctx, req.(*DislikedPackage))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeProProgramer_ServiceDesc is the grpc.ServiceDesc for CodeProProgramer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeProProgramer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CodeProProgramer",
	HandlerType: (*CodeProProgramerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CodePro",
			Handler:    _CodeProProgramer_CodePro_Handler,
		},
		{
			MethodName: "Dislike",
			Handler:    _CodeProProgramer_Dislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/CodePro.proto",
}
