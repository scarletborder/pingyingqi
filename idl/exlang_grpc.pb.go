// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: idl/exlang.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExlangProgramer_GoPro_FullMethodName   = "/ExlangProgramer/GoPro"
	ExlangProgramer_PyPro_FullMethodName   = "/ExlangProgramer/PyPro"
	ExlangProgramer_Dislike_FullMethodName = "/ExlangProgramer/Dislike"
)

// ExlangProgramerClient is the client API for ExlangProgramer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExlangProgramerClient interface {
	GoPro(ctx context.Context, in *ExlangRequest, opts ...grpc.CallOption) (*ExlangResp, error)
	PyPro(ctx context.Context, in *ExlangRequest, opts ...grpc.CallOption) (*ExlangResp, error)
	Dislike(ctx context.Context, in *DislikedPackage, opts ...grpc.CallOption) (*DislikedResp, error)
}

type exlangProgramerClient struct {
	cc grpc.ClientConnInterface
}

func NewExlangProgramerClient(cc grpc.ClientConnInterface) ExlangProgramerClient {
	return &exlangProgramerClient{cc}
}

func (c *exlangProgramerClient) GoPro(ctx context.Context, in *ExlangRequest, opts ...grpc.CallOption) (*ExlangResp, error) {
	out := new(ExlangResp)
	err := c.cc.Invoke(ctx, ExlangProgramer_GoPro_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exlangProgramerClient) PyPro(ctx context.Context, in *ExlangRequest, opts ...grpc.CallOption) (*ExlangResp, error) {
	out := new(ExlangResp)
	err := c.cc.Invoke(ctx, ExlangProgramer_PyPro_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exlangProgramerClient) Dislike(ctx context.Context, in *DislikedPackage, opts ...grpc.CallOption) (*DislikedResp, error) {
	out := new(DislikedResp)
	err := c.cc.Invoke(ctx, ExlangProgramer_Dislike_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExlangProgramerServer is the server API for ExlangProgramer service.
// All implementations must embed UnimplementedExlangProgramerServer
// for forward compatibility
type ExlangProgramerServer interface {
	GoPro(context.Context, *ExlangRequest) (*ExlangResp, error)
	PyPro(context.Context, *ExlangRequest) (*ExlangResp, error)
	Dislike(context.Context, *DislikedPackage) (*DislikedResp, error)
	mustEmbedUnimplementedExlangProgramerServer()
}

// UnimplementedExlangProgramerServer must be embedded to have forward compatible implementations.
type UnimplementedExlangProgramerServer struct {
}

func (UnimplementedExlangProgramerServer) GoPro(context.Context, *ExlangRequest) (*ExlangResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoPro not implemented")
}
func (UnimplementedExlangProgramerServer) PyPro(context.Context, *ExlangRequest) (*ExlangResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PyPro not implemented")
}
func (UnimplementedExlangProgramerServer) Dislike(context.Context, *DislikedPackage) (*DislikedResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dislike not implemented")
}
func (UnimplementedExlangProgramerServer) mustEmbedUnimplementedExlangProgramerServer() {}

// UnsafeExlangProgramerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExlangProgramerServer will
// result in compilation errors.
type UnsafeExlangProgramerServer interface {
	mustEmbedUnimplementedExlangProgramerServer()
}

func RegisterExlangProgramerServer(s grpc.ServiceRegistrar, srv ExlangProgramerServer) {
	s.RegisterService(&ExlangProgramer_ServiceDesc, srv)
}

func _ExlangProgramer_GoPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExlangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExlangProgramerServer).GoPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExlangProgramer_GoPro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExlangProgramerServer).GoPro(ctx, req.(*ExlangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExlangProgramer_PyPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExlangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExlangProgramerServer).PyPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExlangProgramer_PyPro_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExlangProgramerServer).PyPro(ctx, req.(*ExlangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExlangProgramer_Dislike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DislikedPackage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExlangProgramerServer).Dislike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExlangProgramer_Dislike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExlangProgramerServer).Dislike(ctx, req.(*DislikedPackage))
	}
	return interceptor(ctx, in, info, handler)
}

// ExlangProgramer_ServiceDesc is the grpc.ServiceDesc for ExlangProgramer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExlangProgramer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExlangProgramer",
	HandlerType: (*ExlangProgramerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoPro",
			Handler:    _ExlangProgramer_GoPro_Handler,
		},
		{
			MethodName: "PyPro",
			Handler:    _ExlangProgramer_PyPro_Handler,
		},
		{
			MethodName: "Dislike",
			Handler:    _ExlangProgramer_Dislike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idl/exlang.proto",
}
